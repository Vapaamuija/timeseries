#!/usr/bin/env python3
"""
Development utilities for weather-tool.

Provides convenient commands for code formatting, linting, and testing.
Usage: ./bin/dev <command> [options]
"""

import argparse
import subprocess
import sys
from pathlib import Path


def run_command(cmd: list[str], description: str) -> bool:
    """Run a command and return success status."""
    print(f"🔄 {description}...")
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"✅ {description} completed successfully")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ {description} failed")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        return False


def format_code() -> bool:
    """Format code with black and isort."""
    success = True
    success &= run_command(
        ["black", "src/", "tests/", "scripts/", "bin/"],
        "Formatting with black",
    )
    success &= run_command(
        ["isort", "src/", "tests/", "scripts/", "bin/"],
        "Sorting imports with isort",
    )
    return success


def lint_code() -> bool:
    """Run all linting tools."""
    success = True
    success &= run_command(
        ["black", "--check", "src/", "tests/", "scripts/", "bin/"],
        "Checking black formatting",
    )
    success &= run_command(
        ["isort", "--check-only", "src/", "tests/", "scripts/", "bin/"],
        "Checking isort",
    )
    success &= run_command(
        ["flake8", "src/", "tests/", "scripts/", "bin/"], "Running flake8"
    )
    success &= run_command(["mypy", "src/weather_tool/"], "Running mypy type checking")
    success &= run_command(
        ["bandit", "-r", "src/", "-f", "json", "-o", "bandit-report.json"],
        "Running bandit security check",
    )
    return success


def run_tests() -> bool:
    """Run tests with pytest."""
    return run_command(["pytest", "tests/", "-v"], "Running tests")


def run_tests_with_coverage() -> bool:
    """Run tests with coverage."""
    return run_command(
        [
            "pytest",
            "tests/",
            "--cov=weather_tool",
            "--cov-report=html",
            "--cov-report=term-missing",
        ],
        "Running tests with coverage",
    )


def install_pre_commit() -> bool:
    """Install pre-commit hooks."""
    return run_command(["pre-commit", "install"], "Installing pre-commit hooks")


def run_pre_commit() -> bool:
    """Run pre-commit on all files."""
    return run_command(["pre-commit", "run", "--all-files"], "Running pre-commit hooks")


def clean_build() -> bool:
    """Clean build artifacts."""
    import shutil

    paths_to_clean = [
        "build/",
        "dist/",
        "*.egg-info/",
        "src/*.egg-info/",
        ".pytest_cache/",
        ".coverage",
        "htmlcov/",
        "bandit-report.json",
    ]

    print("🧹 Cleaning build artifacts...")
    for pattern in paths_to_clean:
        for path in Path(".").glob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
                print(f"  Removed directory: {path}")
            else:
                path.unlink()
                print(f"  Removed file: {path}")

    # Clean __pycache__ directories
    for pycache in Path(".").rglob("__pycache__"):
        shutil.rmtree(pycache)
        print(f"  Removed __pycache__: {pycache}")

    # Clean .pyc files
    for pyc in Path(".").rglob("*.pyc"):
        pyc.unlink()
        print(f"  Removed .pyc file: {pyc}")

    print("✅ Cleanup complete!")
    return True


def install_package() -> bool:
    """Install the package in editable mode."""
    return run_command(["pip", "install", "-e", "."], "Installing package")


def install_dev_dependencies() -> bool:
    """Install development dependencies."""
    return run_command(["pip", "install", "-e", ".[dev]"], "Installing development dependencies")


def setup_svg_rendering() -> bool:
    """Configure Cairo + SVG rendering."""
    if not Path("bin/setup_svg_rendering.sh").exists():
        print("⚠️ bin/setup_svg_rendering.sh not found, skipping SVG setup")
        return True
    
    print("🎨 Running SVG rendering setup...")
    try:
        result = subprocess.run(
            ["bash", "bin/setup_svg_rendering.sh"], 
            check=True, 
            capture_output=True, 
            text=True
        )
        print("✅ SVG rendering setup completed successfully")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print("⚠️ SVG rendering setup reported an issue")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        print("You can re-run './bin/dev svg-setup' later")
        return True  # Don't fail the build for SVG setup issues


def dev_setup() -> bool:
    """Complete development environment setup."""
    print("🚀 Setting up complete development environment...")
    success = True
    
    # Install development dependencies
    success &= install_dev_dependencies()
    
    # Install pre-commit hooks
    success &= install_pre_commit()
    
    # Setup SVG rendering
    success &= setup_svg_rendering()
    
    if success:
        print("\n✅ Development environment setup complete!")
        print("Next steps:")
        print("  ./bin/dev format    # Format your code")
        print("  ./bin/dev lint      # Check code quality")
        print("  ./bin/dev test      # Run tests")
    else:
        print("\n❌ Development environment setup had issues")
    
    return success


def lint_black() -> bool:
    """Check code formatting with black."""
    return run_command(
        ["black", "--check", "src/", "tests/", "scripts/", "bin/"],
        "Checking black formatting"
    )


def lint_isort() -> bool:
    """Check import sorting with isort."""
    return run_command(
        ["isort", "--check-only", "src/", "tests/", "scripts/", "bin/"],
        "Checking isort"
    )


def lint_flake8() -> bool:
    """Run flake8 linting."""
    return run_command(
        ["flake8", "src/", "tests/", "scripts/", "bin/"],
        "Running flake8"
    )


def lint_mypy() -> bool:
    """Run type checking with mypy."""
    return run_command(
        ["mypy", "src/weather_tool/"],
        "Running mypy type checking"
    )


def lint_bandit() -> bool:
    """Run security checks with bandit."""
    return run_command(
        ["bandit", "-r", "src/", "-f", "json", "-o", "bandit-report.json"],
        "Running bandit security check"
    )


def lint_pylint() -> bool:
    """Run pylint."""
    return run_command(
        ["pylint", "src/weather_tool/"],
        "Running pylint"
    )


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Development tools for weather-tool")
    parser.add_argument(
        "command",
        choices=[
            # Core commands
            "format",
            "lint",
            "test",
            "test-cov",
            "clean",
            "all",
            # Installation commands
            "install",
            "install-dev",
            "dev-setup",
            # SVG setup
            "svg-setup",
            # Pre-commit commands
            "pre-commit-install",
            "pre-commit-run",
            # Individual lint commands
            "lint-black",
            "lint-isort",
            "lint-flake8",
            "lint-mypy",
            "lint-bandit",
            "lint-pylint",
        ],
        help="Command to run",
    )

    args = parser.parse_args()

    # Core commands
    if args.command == "format":
        success = format_code()
    elif args.command == "lint":
        success = lint_code()
    elif args.command == "test":
        success = run_tests()
    elif args.command == "test-cov":
        success = run_tests_with_coverage()
    elif args.command == "clean":
        success = clean_build()
    elif args.command == "all":
        success = True
        success &= format_code()
        success &= lint_code()
        success &= run_tests()
    
    # Installation commands
    elif args.command == "install":
        success = install_package()
    elif args.command == "install-dev":
        success = install_dev_dependencies()
    elif args.command == "dev-setup":
        success = dev_setup()
    
    # SVG setup
    elif args.command == "svg-setup":
        success = setup_svg_rendering()
    
    # Pre-commit commands
    elif args.command == "pre-commit-install":
        success = install_pre_commit()
    elif args.command == "pre-commit-run":
        success = run_pre_commit()
    
    # Individual lint commands
    elif args.command == "lint-black":
        success = lint_black()
    elif args.command == "lint-isort":
        success = lint_isort()
    elif args.command == "lint-flake8":
        success = lint_flake8()
    elif args.command == "lint-mypy":
        success = lint_mypy()
    elif args.command == "lint-bandit":
        success = lint_bandit()
    elif args.command == "lint-pylint":
        success = lint_pylint()

    if success:
        print("\n🎉 All operations completed successfully!")
        sys.exit(0)
    else:
        print("\n💥 Some operations failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()
